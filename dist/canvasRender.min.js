function Scalar(){}var Utils=function(e){return e.getGuid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,s="x"===e?t:3&t|8;return s.toString(16)})},e.parseUrl=function(e){var t=document.createElement("a");return t.href=e,{protocol:t.protocol,port:t.port,pathname:t.pathname,search:t.search,hash:t.hash,host:t.host}},e.sleep=function(e){for(var t=new Date;new Date-t<1e3*e;);},e}(Utils||{}),Utils=function(e){"use strict";e.convertToRad=function(e){return e*(Math.PI/180)};var t=1*new Date-1;return e.getMousePos=function(e,t){var s=e.getBoundingClientRect();return{x:t.clientX-s.left,y:t.clientY-s.top}},e.getCanvas=function(e,t){var s=document.createElement("canvas");return s.width=e,s.height=t,s},e.getPixels=function(e){var t,s;if(e.getContext){t=e;try{s=t.getContext("2d")}catch(n){}}return s||(t=Utils.getCanvas(e.width,e.height),s=t.getContext("2d"),s.drawImage(e,0,0)),s.getImageData(0,0,t.width,t.height)},e.getFps=function(){var e=new Date,s=1e3/(e-t);return t=e,s},e}(Utils||{}),Utils=function(e){return e.isNumber=function(e){return!isNaN(e)},e}(Utils||{}),LinkedList=function(){"use strict";var e=[];this.length=function(){return e.length},this.first=function(){return e[0]},this.last=function(){return e[e.length-1]},this.buildList=function(e){for(var t=0,s=e.length;s>t;t++)0===t&&(this.first=e[t]),t===s-1&&(this.last=e[t]),e[t].prev=e[t-1],e[t].next=e[t+1],e.push(e[t])},this.append=function(t){var s=this.last();e.length>0&&(s.next=t,t.prev=s),e.push(t)},this.getEnumerator=function(){var t=-1;return{current:function(){return e[t]},next:function(){return t!==e.length-1?e[++t]:void 0},prev:function(){return 0!==t?e[t--]:void 0}}}};dependencyContainer.registerType("jQuery",$),dependencyContainer.registerType("linq",linq),dependencyContainer.registerType("Utils",Utils),dependencyContainer.registerType("EventDispatcher",EventDispatcher),dependencyContainer.registerType("LinkedList",LinkedList),registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Animation=inject().class(function(e,t){var s,n=0,i=!1,r=!1,a=!1,o=function(t){e({frameRate:t,lastTime:n,time:n+1e3/t}),n+=1e3/t};this.start=function(){i||(i=!0,r=a=!1,s=t.on("animate",o))},this.reset=function(){n=0},this.pause=function(){i&&s&&s(),i=!1,a=!0},this.stop=function(){i&&s&&(this.reset(),s()),i=!1,r=!0}}),registerNamespace("RenderJs.Canvas.Filters"),RenderJs.Canvas.Filters.Convolute=function(e,t,s){for(var n=Math.round(Math.sqrt(t.length)),i=Math.floor(n/2),r=Utils.getPixels(e),a=r.data,o=r.width,h=r.height,c=o,l=h,u=Utils.getCanvas(c,l).getContext("2d").createImageData(c,l),d=u.data,v=s?1:0,f=0;l>f;f++)for(var g=0;c>g;g++){for(var p=f,y=g,R=4*(f*c+g),J=0,x=0,C=0,m=0,w=0;n>w;w++)for(var b=0;n>b;b++){var E=p+w-i,M=y+b-i;if(E>=0&&h>E&&M>=0&&o>M){var V=4*(E*o+M),S=t[w*n+b];J+=a[V]*S,x+=a[V+1]*S,C+=a[V+2]*S,m+=a[V+3]*S}}d[R]=J,d[R+1]=x,d[R+2]=C,d[R+3]=m+v*(255-m)}return u},RenderJs.Canvas.Filters.Blur=function(e,t){return stackBlurImage(e,t)},RenderJs.Canvas.Filters.Grayscale=function(e){for(var t=Utils.getPixels(e),s=t.data,n=0;n<s.length;n+=4){var i=s[n],r=s[n+1],a=s[n+2],o=.2126*i+.7152*r+.0722*a;s[n]=s[n+1]=s[n+2]=o}return t},RenderJs.Canvas.Filters.Brightness=function(e,t){for(var s=Utils.getPixels(e),n=s.data,i=0;i<n.length;i+=4)n[i]+=t,n[i+1]+=t,n[i+2]+=t;return s},RenderJs.Canvas.Filters.Threshold=function(e,t){for(var s=Utils.getPixels(e),n=s.data,i=0;i<n.length;i+=4){var r=n[i],a=n[i+1],o=n[i+2],h=.2126*r+.7152*a+.0722*o>=t?255:0;n[i]=n[i+1]=n[i+2]=h}return s},registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Layer=inject("Utils","EventDispatcher","jQuery").class(function(e,t,s,n,i,r,a){var o=this,h=!1,c=!1,l=new t,u=0;this.canvas=document.createElement("canvas"),document.getElementById(n).appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.canvas.width=i,this.canvas.height=r,this.active=a,this.prev=null,this.next=null,this.objects=[];var d=function(e,t){t=t||Utils.getMousePos(e.target,e),l.trigger(RenderJs.Canvas.Events.click,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.click,e),!0;this.prev&&s(this.prev.canvas).trigger("click",t)},v=function(e,t){t=t||Utils.getMousePos(e.target,e),l.trigger(RenderJs.Canvas.Events.mousemove,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mousemove,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mousemove",t)},f=function(e,t){t=t||Utils.getMousePos(e.target,e),l.trigger(RenderJs.Canvas.Events.mouseenter,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mouseenter,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mouseenter",t)},g=function(e,t){t=t||Utils.getMousePos(e.target,e),l.trigger(RenderJs.Canvas.Events.mouseleave,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mouseleave,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mouseleave",t)},p=function(e){l.trigger(RenderJs.Canvas.Events.keydown,e)},y=function(e){l.trigger(RenderJs.Canvas.Events.keyup,e)},R=function(e){l.trigger(RenderJs.Canvas.Events.keypress,e)};s(this.canvas).on("click",function(e,t){d.call(o,e,t)}),s(this.canvas).on("mousemove",function(e,t){v.call(o,e,t)}),s(this.canvas).on("mouseenter",function(e,t){f.call(o,e,t)}),s(this.canvas).on("mouseleave",function(e,t){g.call(o,e,t)}),s(document).on("keydown",function(e){p.call(o,e)}),s(document).on("keyup",function(e){y.call(o,e)}),s(document).on("keypress",function(e){R.call(o,e)}),this.on=function(e,t){return RenderJs.Canvas.Events[e]?l.subscribe(e,t):void 0},this.addObject=function(e){if(!(e instanceof RenderJs.Canvas.Object))throw new Error("An object on the canvas should be inherited from CanvasObject!");e.layer=this,this.objects.push(e)},this.removeObject=function(e){linq(this.objects).remove(function(t){return t===e}),e.dispose(),c=!0},this.resize=function(e,t){this.canvas.width=e,this.canvas.height=t,c=!0},this.hasSprites=function(){for(var e=0,t=this.objects.length;t>e;e++)if(this.objects[e]instanceof RenderJs.Canvas.Shapes.Sprite)return!0;return!1},this.drawObjects=function(e,t){if(c||(!h||l.hasSubscribers("animate")||this.hasSprites(this)||this.active)&&0!==this.objects.length){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);var s=Math.floor(1e3/e);l.trigger("animate",e);for(var n=!0,i=0,r=this.objects.length;r>i;i++)this.objects[i].loaded||(n=!1),this.objects[i].draw(this.ctx,{frameRate:e,lastTime:u,time:u+s},t);n&&(h=!0),c&&(c=!1),u+=s}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Events={animate:"animate",click:"click",keydown:"keydown",keyup:"keyup",keypress:"keypress",mousemove:"mousemove",mousehover:"mousehover",mouseleave:"mouseleave",collision:"collision",objectChanged:"objectChanged"},RenderJs.Canvas.Object=inject("EventDispatcher","jQuery","Utils").class(function(e,t,s,n){this.dispatcher=new e,n=n||{},this.id=s.getGuid(),this.pos=new RenderJs.Vector(n.x,n.y),this.width=n.width||0,this.height=n.height||0,this.angle=n.angle||0,this.scaleX=n.scaleX,this.scaleY=n.scaleY,this.blurRadius=n.blurRadius,this.collision=n.collision||!1,this.filters=[],this.layer=null,this.loaded=!0,this.getCenter=function(){return new RenderJs.Vector(this.pos.x+this.width/2,this.pos.y+this.height/2)},this.getCenteredRect=function(){var e=this.pos;return{x:e.x,y:e.y,width:this.width,height:this.height}},this.setfilters=function(e){this.filters=e},this.updatePosition=function(e,t){var s=RenderJs.Vector.clone(this.pos.x,this.pos.y),n=this.pos.add(new RenderJs.Vector(Math.floor(e),Math.floor(t)));this.pos=n,(s.x!==n.x||s.y!==n.y)&&this.trigger(RenderJs.Canvas.Events.objectChanged,this)},this.rotateShape=function(e){if(0!==this.angle){var t=this.getCenter();e.translate(t.x,t.y),e.rotate(s.convertToRad(this.angle)),e.translate(-t.x,-t.y)}},this.scaleShape=function(e,t,s){var n=this.getCenter();e.translate(n.x,n.y),e.scale(t,s),e.translate(-n.x,-n.y)},this.on=function(e,t){return RenderJs.Canvas.Events[e]?this.dispatcher.subscribe(e,t):void 0},this.trigger=function(e,t){RenderJs.Canvas.Events[e]&&this.dispatcher.trigger(e,t)},this.dispose=function(){this.dispatcher.dispose()}});var RenderJs=RenderJs||{};RenderJs.Canvas=RenderJs.Canvas||{},RenderJs.Canvas.Space=function(e){var t=function(e){this.stage=e.stage};t(e)},registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Stage=inject("Utils","EventDispatcher","LinkedList").class(function(e,t,s,n){var i=n.container||"viewport",r=0,a=new t;this.layers=new s,this.position=new RenderJs.Vector(-50,-50);var o=function(){var t=this;r=e.getFps();for(var s=this.layers.getEnumerator();void 0!==s.next();)s.current().drawObjects(r,this.position);requestAnimationFrame(function(){o.call(t)})};o.call(this),this.resize=function(e,t){this.width=e,this.height=t,document.getElementById(i).style.width=this.width+"px",document.getElementById(i).style.height=this.height+"px";for(var s=this.layers.getEnumerator();void 0!==s.next();)s.current().resize(e,t)},this.onInvalidate=function(e){return a.subscribe("onInvalidate",e)},this.createLayer=function(e){var t=new RenderJs.Canvas.Layer(i,this.width,this.height,e);return this.layers.append(t),t},this.resize(n.width||1200,n.height||800)});var RenderJs=RenderJs||{};RenderJs.Canvas=RenderJs.Canvas||{},RenderJs.Canvas.Easings=RenderJs.Canvas.Easings||{},RenderJs.Canvas.Easings.BounceEaseOut=function(e,t,s,n){return(e/=n)<1/2.75?7.5625*s*e*e+t:2/2.75>e?s*(7.5625*(e-=1.5/2.75)*e+.75)+t:2.5/2.75>e?s*(7.5625*(e-=2.25/2.75)*e+.9375)+t:s*(7.5625*(e-=2.625/2.75)*e+.984375)+t},RenderJs.Canvas.Easings.BounceEaseIn=function(e,t,s,n){return s-Kinetic.Easings.BounceEaseOut(n-e,0,s,n)+t},RenderJs.Canvas.Easings.BounceEaseInOut=function(e,t,s,n){return n/2>e?.5*Kinetic.Easings.BounceEaseIn(2*e,0,s,n)+t:.5*Kinetic.Easings.BounceEaseOut(2*e-n,0,s,n)+.5*s+t},RenderJs.Canvas.Easings.EaseIn=function(e,t,s,n){return s*(e/=n)*e+t},RenderJs.Canvas.Easings.EaseOut=function(e,t,s,n){return-s*(e/=n)*(e-2)+t},RenderJs.Canvas.Easings.EaseInOut=function(e,t,s,n){return(e/=n/2)<1?s/2*e*e+t:-s/2*(--e*(e-2)-1)+t},RenderJs.Canvas.Easings.ElasticEaseIn=function(e,t,s,n,i,r){var a=0;return 0===e?t:1===(e/=n)?t+s:(r||(r=.3*n),!i||i<Math.abs(s)?(i=s,a=r/4):a=r/(2*Math.PI)*Math.asin(s/i),-(i*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/r))+t)},RenderJs.Canvas.Easings.ElasticEaseOut=function(e,t,s,n,i,r){var a=0;return 0===e?t:2===(e/=n/2)?t+s:(r||(r=.3*n*1.5),!i||i<Math.abs(s)?(i=s,a=r/4):a=r/(2*Math.PI)*Math.asin(s/i),1>e?-.5*i*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/r)+t:i*Math.pow(2,-10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/r)*.5+s+t)},RenderJs.Canvas.Easings.ElasticEaseInOut=function(e,t,s,n,i,r){var a=0;return 0===e?t:2===(e/=n/2)?t+s:(r||(r=.3*n*1.5),!i||i<Math.abs(s)?(i=s,a=r/4):a=r/(2*Math.PI)*Math.asin(s/i),1>e?-.5*i*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/r)+t:i*Math.pow(2,-10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/r)*.5+s+t)},RenderJs.Canvas.Transition=function(e){var t=this,s=!1;this.duration=1e3*e.duration||1e3,this.shape=e.shape,this.props=e.props||{},this.origProps={};for(var n in e.props)this.origProps[n]=this.shape[n];this.easing=e.easing||RenderJs.Canvas.Easings.EaseInOut;var i=new RenderJs.Canvas.Animation(function(e){e.time>=t.duration&&i.stop();for(var n in t.props)t.shape[n]=s?t.easing(e.time,t.origProps[n]+t.props[n],-1*t.props[n],t.duration):t.easing(e.time,t.origProps[n],t.props[n],t.duration)},this.shape.layer);this.play=function(){i.start()},this.pause=function(){i.pause()},this.stop=function(){i.stop()},this.reverse=function(){s=!0,i.start()}};var RenderJs=RenderJs||{};RenderJs.Vector=function(e,t){this.x=e||0,this.y=t||0,this.set=function(e){return this.x=e.x,this.y=e.y,this},this.lengthSquared=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},this.length=function(){return Math.sqrt(this.lengthSquared())},this.length2=function(){return this.dot(this)},this.perp=function(){return new RenderJs.Vector(this.y,-this.x)},this.scale=function(e){return new RenderJs.Vector(this.x*e,this.y*e)},this.sub=function(e){return e instanceof RenderJs.Vector?new RenderJs.Vector(this.x-e.x,this.y-e.y):new RenderJs.Vector(this.x-e,this.y-e)},this.add=function(e){return e instanceof RenderJs.Vector?new RenderJs.Vector(this.x+e.x,this.y+e.y):new RenderJs.Vector(this.x+e,this.y+e)},this.dot=function(e){return this.x*e.x+this.y*e.y},this.dist=function(e){return this.sub(e).length()},this.normalize=function(){return this.scale(1/this.length())},this.angle=function(e){return this.dot(e)/(this.length()*e.length())},this.truncate=function(e){var t=Math.min(e,this.length());return t},this.rotate=function(e){var t=this.x,s=this.y;this.x=t*Math.cos(Utils.convertToRad(e))-s*Math.sin(Utils.convertToRad(e)),this.y=s*Math.cos(Utils.convertToRad(e))+t*Math.sin(Utils.convertToRad(e))},this.toString=function(e){return e?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"}},RenderJs.Vector.clone=function(e,t){return new RenderJs.Vector(e,t)},RenderJs.Vector.area=function(e,t,s){return(t.x-e.x)*(s.y-e.y)-(s.x-e.x)*(t.y-e.y)},RenderJs.Vector.left=function(e,t,s){return RenderJs.Vector.area(e,t,s)>0},RenderJs.Vector.leftOn=function(e,t,s){return RenderJs.Vector.area(e,t,s)>=0},RenderJs.Vector.right=function(e,t,s){return RenderJs.Vector.area(e,t,s)<0},RenderJs.Vector.rightOn=function(e,t,s){return RenderJs.Vector.area(e,t,s)<=0},RenderJs.Vector.sqdist=function(e,t){var s=t.x-e.x,n=t.y-e.y;return s*s+n*n},Scalar.eq=function(e,t,s){return s=s||0,Math.abs(e-t)<s};var RenderJs=RenderJs||{};RenderJs.Physics=RenderJs.Physics||{},RenderJs.Physics.Collisions=function(e){var t=function(e,t){"takes a point p=Pt() and an edge of two endpoints a,b=Pt() of a line segment returns boolean";var s,n=1e-5,i=Number.MAX_VALUE,r=Number.MIN_VALUE,a=0,o=t.p1,h=t.p2;o.y>h.y&&(o.set(h),h.set(o)),(e.y==o.y||e.y==h.y)&&(e.y+=n);var c=!1;return e.y>h.y||e.y<o.y||e.x>Math.max(o.x,h.x)?!1:(e.x<Math.min(o.x,h.x)?c=!0:(a=Math.abs(o.x-h.x)>r?(h.y-o.y)/(h.x-o.x):i,s=Math.abs(o.x-e.x)>r?(e.y-o.y)/(e.x-o.x):i,c=s>=a),c)},s=function(e,t){var s=e.length2(),n=t.dot(e);return 0>n?-1:n>s?1:0},n=function(e,s){for(var n=!1,i=0;i<s.rEdges.length;i++)t(e,s.rEdges[i])&&(n=!n);return n},i=function(e,t){var s=(t.pos2.y-t.pos.y)/(t.pos2.x-t.pos.x);return e.y-t.pos.y==s*(e.x-t.pos.y)},r=function(e,t){return o=t.getCenter(),Math.pow(e.x-o.x,2)+Math.pow(e.y-o.y,2)<=Math.pow(this.width/2,2)},a=function(e,t){var s=e.width,n=e.height,i=t.width,r=t.height;if(0>=i||0>=r||0>=s||0>=n)return!1;var a=e.x,o=e.y,h=t.x,c=t.y;return i+=h,r+=c,s+=a,n+=o,(h>i||i>a)&&(c>r||r>o)&&(a>s||s>h)&&(o>n||n>c)},h=function(e,t){return d(t.getCenter(),e)||c(e.topEdge(),t)||c(e.rightEdge(),t)||c(e.bottomEdge(),t)||c(e.leftEdge(),t)},c=function(e,t){var s=t.getCenter(),n=t.radius,i=new RenderJs.Vector(e.pos2.x-e.pos.x,e.pos2.y-e.pos.y),r=new RenderJs.Vector(e.pos.x-s.x,e.pos.y-s.y),a=i.dot(i),o=2*r.dot(i),t=r.dot(r)-n*n,h=o*o-4*a*t;if(0>h)return!1;h=Math.sqrt(h);var c=(-o-h)/(2*a),l=(-o+h)/(2*a);return c>=0&&1>=c?!0:l>=0&&1>=l?!0:!1},l=function(e,t){var s=t.v,n=e.radius+t.radius,i=(e.pos.x-t.pos.x)*(e.pos.x-t.pos.x)+(e.pos.y-t.pos.y)*(e.pos.y-t.pos.y);if(n*n>i){{var r=Math.sqrt(i),a=n-r,o=new RenderJs.Vector(e.pos.sub(t.pos).x/r,e.pos.sub(t.pos).y/r);t.pos.sub(e.pos)}return s.add(o.scale(a/2))}return null},u=function(e,t){for(var n=e.pos.sub(t.pos),i=e.radius,r=i*i,a=t.vertices.slice(),o=a.length,h=new RenderJs.Vector(0,0),c=new RenderJs.Vector(0,0),l={overlap:Number.MAX_VALUE,overlapN:new RenderJs.Vector(0,0),overlapV:new RenderJs.Vector(0,0)},u=0;o>u;u++){var d=u===o-1?0:u+1,v=0===u?o-1:u-1,f=0,g=null;h.set(t.vertices[u]),c.set(n),c.set(c.sub(a[u])),l&&c.length2()>r&&(l.aInB=!1);var p=s(h,c);if(-1===p){h.set(t.edges[v]);var y=new RenderJs.Vector(0,0).set(n).sub(a[v]);if(p=s(h,y),1===p){var R=c.length();if(R>i)return!1;l&&(l.bInA=!1,g=c.normalize(),f=i-R)}}else if(1===p){if(h.set(t.edges[d]),c.set(n),c.set(c.sub(a[d])),p=s(h,c),-1===p){var R=c.length();if(R>i)return!1;l&&(l.bInA=!1,g=c.normalize(),f=i-R)}}else{var J=h.perp().normalize(),R=c.dot(J),x=Math.abs(R);if(R>0&&x>i)return!1;l&&(g=J,f=i-R,(R>=0||2*i>f)&&(l.bInA=!1))}g&&l&&Math.abs(f)<Math.abs(l.overlap)&&(l.overlap=f,l.overlapN=new RenderJs.Vector(0,0).set(g))}return l&&(l.a=t,l.b=e,l.overlapV=new RenderJs.Vector(0,0).set(l.overlapN).scale(l.overlap)),!0},d=function(e,t){return e.x>=t.x&&e.x<=t.x+t.width&&e.y>=t.y&&e.y<=t.y+t.height};return e.AabbCollision=function(e,t){return Math.abs(e.x-t.x)<e.width+t.width&&Math.abs(e.y-t.y)<e.height+t.height?!0:!1},e.pointInObject=function(e,t){return t instanceof RenderJs.Canvas.Shapes.Rectangle?d(e,t):t instanceof RenderJs.Canvas.Shapes.Arc?r(e,t):t instanceof RenderJs.Canvas.Shapes.Polygon?n(e,t):t instanceof RenderJs.Canvas.Shapes.Line?i(e,t):!1},e.checkCollision=function(t,s,n){if(t instanceof RenderJs.Canvas.Shapes.Rectangle&&s instanceof RenderJs.Canvas.Shapes.Rectangle)return a(t,s);if(t instanceof RenderJs.Canvas.Shapes.Rectangle&&s instanceof RenderJs.Canvas.Shapes.Arc)return h(t,s);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Rectangle)return h(s,t);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Arc)return l(t,s,n);if(t instanceof RenderJs.Canvas.Shapes.Line&&s instanceof RenderJs.Canvas.Shapes.Arc)return c(t,s);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Line)return c(s,t);if(t instanceof RenderJs.Canvas.Shapes.Polygon&&s instanceof RenderJs.Canvas.Shapes.Polygon){for(var i=0;i<t.subPolys.length;i++)for(var r=0;r<s.subPolys.length;r++){var o=e.polygonCollision(t.subPolys[i],s.subPolys[r],n);if(o.intersect||o.willIntersect)return o}return null}return t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Polygon?u(t,s,n):t instanceof RenderJs.Canvas.Shapes.Polygon&&s instanceof RenderJs.Canvas.Shapes.Arc?u(s,t,n):!1},e}(RenderJs.Physics.Collisions||{});var RenderJs=RenderJs||{};RenderJs.Physics.Collisions=function(e){e.polygonCollision=function(e,n,i){for(var r,a={intersect:!0,willIntersect:!0},o=e.edges.length,h=n.edges.length,c=1/0,l=new RenderJs.Vector,u=0,v=o+h;v>u;u++){r=o>u?e.edges[u]:n.edges[u-o];var f=new RenderJs.Vector(-r.y,r.x);f.set(f.normalize());var g=0,p=0,y=0,R=0,J=s(f,e,g,y);g=J.min,y=J.max;var x=s(f,n,p,R);p=x.min,R=x.max,t(g,y,p,R)>0&&(a.intersect=!1);var C=f.dot(i);0>C?g+=C:y+=C;var m=t(g,y,p,R);if(m>0&&(a.willIntersect=!1),!a.intersect&&!a.willIntersect)break;m=Math.abs(m),c>m&&(c=m,l=f,d=e.getCenter().sub(n.getCenter()),d.dot(l)<0&&(l=l.scale(-1)))}return a.willIntersect&&(a.minimumTranslationVector=l.scale(c)),a};var t=function(e,t,s,n){return s>e?s-t:e-n},s=function(e,t,s,n){var i=e.dot(t.vertices[0]);s=i,n=i;for(var r=0;r<t.vertices.length;r++)i=t.vertices[r].dot(e),s>i?s=i:i>n&&(n=i);return{min:s,max:n}};return e}(RenderJs.Physics.Collisions||{}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Arc=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){"use strict";this.base(t),t=t||{},t.width=t.height=2*t.radius,2*t.radius,this.radius=t.radius,this.sAngle=e.convertToRad(t.sAngle||0),this.eAngle=e.convertToRad(t.eAngle||360),this.color=t.color,this.fillColor=t.fillColor,this.lineWidth=t.lineWidth||1,this.getCenter=function(){return new RenderJs.Vector(this.pos.x+this.width/2,this.pos.y+this.height/2)},this.pointIntersect=function(e){var t=this.getCenter();return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)<=Math.pow(this.width/2,2)},this.draw=function(e){0!==this.angle&&(e.save(),this.rotateShape(e)),e.beginPath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=this.fillColor,e.arc(this.pos.x+this.width/2,this.pos.y+this.height/2,this.width/2,this.sAngle,this.eAngle),this.color&&e.stroke(),this.fillColor&&e.fill(),e.closePath(),0!==this.angle&&e.restore()}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Image=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t);var s=document.createElement("img");s.src=t.url,s.onload=function(){o.width=s.width,o.height=s.height,n=!0};var n=!1,i=t.blurRadius||0,r=void 0==t.cache?!0:t.cache,a=null,o=this;this.draw=function(e){if(n){if(!a)for(var t=0;t<this.filters.length;t++)switch(this.filters[t]){case RenderJs.Canvas.Filters.Blur:a=RenderJs.Canvas.Filters.Blur(s,i)}a?e.putImageData(a,this.pos.x,this.pos.y):e.drawImage(s,this.pos.x,this.pos.y),r||(a=null)}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Line=inject().base(RenderJs.Canvas.Object).class(function(e){this.base({x:e.x1,y:e.y1,width:Math.abs(e.x2-e.x1),height:Math.abs(e.y2-e.y1)}),this.color="#000",this.lineWidth=1,this.pos2=new RenderJs.Vector(e.x2,e.y2),this.color=e.color,this.lineWidth=e.lineWidth||1,this.draw=function(e,t,s){var n=this.pos.sub(s),i=this.pos2.sub(s);e.beginPath(),e.moveTo(n.x,n.y),e.lineTo(i.x,i.y),e.closePath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.stroke()}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Polygon=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t),this.color=t.color||"#000",this.lineWidth=t.lineWidth||1,this.vertices=t.points||[],this.subPolys=[],this.edges=[],this.rEdges=[],this.buildEdges(),this.decompose=function(e,t,s,n,i,r){i=i||100,r=r||0,n=n||25,e="undefined"!=typeof e?e:[],t=t||[],s=s||[];var a=new RenderJs.Vector(0,0),o=new RenderJs.Vector(0,0),h=new RenderJs.Vector(0,0),c=0,l=0,u=0,d=0,v=0,f=0,g=0,p=new RenderJs.Canvas.Shapes.Polygon,y=new RenderJs.Canvas.Shapes.Polygon,R=this,J=this.vertices;if(J.length<3)return e;if(r++,r>i)return console.warn("quickDecomp: max level ("+i+") reached."),e;for(var x=0;x<this.vertices.length;++x)if(R.isReflex(x)){t.push(R.vertices[x]),c=l=Number.MAX_VALUE;for(var C=0;C<this.vertices.length;++C)RenderJs.Vector.left(R.at(x-1),R.at(x),R.at(C))&&RenderJs.Vector.rightOn(R.at(x-1),R.at(x),R.at(C-1))&&(h=this.getIntersectionPoint(R.at(x-1),R.at(x),R.at(C),R.at(C-1)),RenderJs.Vector.right(R.at(x+1),R.at(x),h)&&(u=RenderJs.Vector.sqdist(R.vertices[x],h),l>u&&(l=u,o=h,f=C))),RenderJs.Vector.left(R.at(x+1),R.at(x),R.at(C+1))&&RenderJs.Vector.rightOn(R.at(x+1),R.at(x),R.at(C))&&(h=this.getIntersectionPoint(R.at(x+1),R.at(x),R.at(C),R.at(C+1)),RenderJs.Vector.left(R.at(x-1),R.at(x),h)&&(u=RenderJs.Vector.sqdist(R.vertices[x],h),c>u&&(c=u,a=h,v=C)));if(f==(v+1)%this.vertices.length)h.x=(o.x+a.x)/2,h.y=(o.y+a.y)/2,s.push(h),v>x?(p.append(R,x,v+1),p.vertices.push(h),y.vertices.push(h),0!=f&&y.append(R,f,R.vertices.length),y.append(R,0,x+1)):(0!=x&&p.append(R,x,R.vertices.length),p.append(R,0,v+1),p.vertices.push(h),y.vertices.push(h),y.append(R,f,x+1));else{if(f>v&&(v+=this.vertices.length),d=Number.MAX_VALUE,f>v)return e;for(var C=f;v>=C;++C)RenderJs.Vector.leftOn(R.at(x-1),R.at(x),R.at(C))&&RenderJs.Vector.rightOn(R.at(x+1),R.at(x),R.at(C))&&(u=RenderJs.Vector.sqdist(R.at(x),R.at(C)),d>u&&(d=u,g=C%this.vertices.length));g>x?(p.append(R,x,g+1),0!==g&&y.append(R,g,J.length),y.append(R,0,x+1)):(0!==x&&p.append(R,x,J.length),p.append(R,0,g+1),y.append(R,g,x+1))}p.vertices.length<y.vertices.length?(p.decompose(e,t,s,n,i,r),y.decompose(e,t,s,n,i,r)):(y.decompose(e,t,s,n,i,r),p.decompose(e,t,s,n,i,r));for(var m=0;m<e.length;m++)e[m].buildEdges();return e}return e.push(this),e},this.append=function(e,t,s){if("undefined"==typeof t)throw new Error("From is not given!");if("undefined"==typeof s)throw new Error("To is not given!");if(t>s-1)throw new Error("lol1");if(s>e.vertices.length)throw new Error("lol2");if(0>t)throw new Error("lol3");for(var n=t;s>n;n++)this.vertices.push(e.vertices[n])},this.at=function(e){var t=this.vertices,s=t.length;return t[0>e?e%s+s:e%s]},this.first=function(){return this.vertices[0]},this.last=function(){return this.vertices[this.vertices.length-1]},this.isSimple=function(){for(var e=this.vertices,t=0;t<e.length-1;t++)for(var s=0;t-1>s;s++)if(this.segmentsIntersect(e[t],e[t+1],e[s],e[s+1]))return!1;for(var t=1;t<e.length-2;t++)if(this.segmentsIntersect(e[0],e[e.length-1],e[t],e[t+1]))return!1;return!0},this.getIntersectionPoint=function(e,t,s,n,i){i=i||0;var r=t.y-e.y,a=e.x-t.x,o=r*e.x+a*e.y,h=n.y-s.y,c=s.x-n.x,l=h*s.x+c*s.y,u=r*c-h*a;return Scalar.eq(u,0,i)?RenderJs.Vector.clone(0,0):RenderJs.Vector.clone((c*o-a*l)/u,(r*l-h*o)/u)},this.isReflex=function(e){return RenderJs.Vector.right(this.at(e-1),this.at(e),this.at(e+1))},this.makeCCW=function(){for(var e=0,t=this.vertices,s=1;s<this.vertices.length;++s)(t[s].y<t[e].y||t[s].y==t[e].y&&t[s].x>t[e].x)&&(e=s);RenderJs.Vector.left(this.at(e-1),this.at(e),this.at(e+1))||this.reverse()},this.reverse=function(){for(var e=[],t=0,s=this.vertices.length;t!==s;t++)e.push(this.vertices.pop());this.vertices=e},this.segmentsIntersect=function(e,t,s,n){var i=t.x-e.x,r=t.y-e.y,a=n.x-s.x,o=n.y-s.y;if(a*r-o*i==0)return!1;var h=(i*(s.y-e.y)+r*(e.x-s.x))/(a*r-o*i),c=(a*(e.y-s.y)+o*(s.x-e.x))/(o*i-a*r);return h>=0&&1>=h&&c>=0&&1>=c},this.buildEdges=function(){var e,t;this.edges=[],this.rEdges=[];for(var s=0;s<this.vertices.length;s++)e=this.vertices[s],t=s+1>=this.vertices.length?this.vertices[0]:this.vertices[s+1],this.edges.push(t.sub(e)),this.rEdges.push({p1:new RenderJs.Vector(e.x,e.y),p2:new RenderJs.Vector(t.x,t.y)})},this.getCenter=function(){for(var e=0,t=0,s=0;s<this.vertices.length;s++)e+=this.vertices[s].x,t+=this.vertices[s].y;return new RenderJs.Vector(e/this.vertices.length,t/this.vertices.length)},this.offset=function(){var e=2===arguments.length?new RenderJs.Vector(arguments[0],arguments[1]):arguments[0];this.pos.set(this.pos.add(e));for(var t=0;t<this.vertices.length;t++){var s=this.vertices[t];this.vertices[t].set(s.add(e))}this.subPolys=this.decompose()},this.toString=function(){for(var e="",t=0;t<this.vertices.length;t++)""!=e&&(e+=" "),e+="{"+this.vertices[t].toString(!0)+"}";return e},this.draw=function(e){for(var t=["indianred","yellow","green"],s=0;s<this.subPolys.length;s++){var n=this.subPolys[s].vertices;e.beginPath(),e.moveTo(n[0].x,n[0].y);for(var i=1;i<n.length;i++)e.lineTo(n[i].x,n[i].y);e.closePath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=t[s],e.fill(),e.stroke()}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Rectangle=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t),this.color=t.color,this.fillColor=t.fillColor,this.lineWidth=t.lineWidth||1,this.draw=function(e){this.color&&e.strokeRect(this.pos.x,this.pos.y,this.width,this.height),this.fillColor&&e.fillRect(this.pos.x,this.pos.y,this.width,this.height),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=this.fillColor}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Sprite=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t);var s=this,n=document.createElement("img");n.onload=function(){s.width=n.width,s.height=n.height,a=!0},n.src=t.url;var i,r,a=!1,o=0,h=t.frameCount,c=!1,l=!1,u=t.defAnimation,d=t.animations,v=function(e,t){o=0,c=!0,l=t,d[e]&&(r=i,i=d[e])};this.start=function(){v(u,!0)},this.setAnimation=function(e,t){v(e,t)},this.pointIntersect=function(){return!1},this.getRect=function(){var e=d[u][0];return{x:this.pos.x,y:this.pos.y,width:e[2],height:e[3]}},this.rotateShape=function(t,s){if(0!==this.angle){var n=d[u][0],i=new RenderJs.Vector(s.x+n[2]/2,s.y+n[3]/2);t.translate(i.x,i.y),t.rotate(e.convertToRad(this.angle)),t.translate(-i.x,-i.y)}},this.draw=function(e,t,s){if(a&&c){var r=this.pos.sub(s);0!==this.angle&&(e.save(),this.rotateShape(e,r));var d=i[o];e.drawImage(n,d[0],d[1],d[2],d[3],r.x,r.y,d[2],d[3]),Math.floor(t.time)%h===0&&(o=o>=i.length-1?0:o+1,0!==o||l||v(u,!0)),0!==this.angle&&e.restore()}}});
//# sourceMappingURL=data:application/json;base64,