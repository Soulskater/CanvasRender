function Scalar(){}var Utils=function(e){return e.getGuid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,s="x"===e?t:3&t|8;return s.toString(16)})},e.parseUrl=function(e){var t=document.createElement("a");return t.href=e,{protocol:t.protocol,port:t.port,pathname:t.pathname,search:t.search,hash:t.hash,host:t.host}},e.sleep=function(e){for(var t=new Date;new Date-t<1e3*e;);},e}(Utils||{}),Utils=function(e){"use strict";e.convertToRad=function(e){return e*(Math.PI/180)};var t=1*new Date-1;return e.getMousePos=function(e,t){var s=e.getBoundingClientRect();return{x:t.clientX-s.left,y:t.clientY-s.top}},e.getCanvas=function(e,t){var s=document.createElement("canvas");return s.width=e,s.height=t,s},e.getPixels=function(e){var t,s;if(e.getContext){t=e;try{s=t.getContext("2d")}catch(n){}}return s||(t=Utils.getCanvas(e.width,e.height),s=t.getContext("2d"),s.drawImage(e,0,0)),s.getImageData(0,0,t.width,t.height)},e.getFps=function(){var e=new Date,s=1e3/(e-t);return t=e,s},e}(Utils||{}),Utils=function(e){return e.isNumber=function(e){return!isNaN(e)},e}(Utils||{}),LinkedList=function(){"use strict";var e=[];this.length=function(){return e.length},this.first=function(){return e[0]},this.last=function(){return e[e.length-1]},this.buildList=function(e){for(var t=0,s=e.length;s>t;t++)0===t&&(this.first=e[t]),t===s-1&&(this.last=e[t]),e[t].prev=e[t-1],e[t].next=e[t+1],e.push(e[t])},this.append=function(t){var s=this.last();e.length>0&&(s.next=t,t.prev=s),e.push(t)},this.getEnumerator=function(){var t=-1;return{current:function(){return e[t]},next:function(){return t!==e.length-1?e[++t]:void 0},prev:function(){return 0!==t?e[t--]:void 0}}}};dependencyContainer.registerType("jQuery",$),dependencyContainer.registerType("linq",linq),dependencyContainer.registerType("Utils",Utils),dependencyContainer.registerType("EventDispatcher",EventDispatcher),dependencyContainer.registerType("LinkedList",LinkedList),registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Animation=inject().class(function(e,t){var s,n=0,r=!1,i=!1,a=!1,o=function(t){e({frameRate:t,lastTime:n,time:n+1e3/t}),n+=1e3/t};this.start=function(){r||(r=!0,i=a=!1,s=t.on("animate",o))},this.reset=function(){n=0},this.pause=function(){r&&s&&s(),r=!1,a=!0},this.stop=function(){r&&s&&(this.reset(),s()),r=!1,i=!0}}),registerNamespace("RenderJs.Canvas.Filters"),RenderJs.Canvas.Filters.Convolute=function(e,t,s){for(var n=Math.round(Math.sqrt(t.length)),r=Math.floor(n/2),i=Utils.getPixels(e),a=i.data,o=i.width,h=i.height,c=o,l=h,u=Utils.getCanvas(c,l).getContext("2d").createImageData(c,l),d=u.data,v=s?1:0,f=0;l>f;f++)for(var g=0;c>g;g++){for(var p=f,R=g,y=4*(f*c+g),J=0,x=0,C=0,m=0,w=0;n>w;w++)for(var b=0;n>b;b++){var E=p+w-r,M=R+b-r;if(E>=0&&h>E&&M>=0&&o>M){var V=4*(E*o+M),S=t[w*n+b];J+=a[V]*S,x+=a[V+1]*S,C+=a[V+2]*S,m+=a[V+3]*S}}d[y]=J,d[y+1]=x,d[y+2]=C,d[y+3]=m+v*(255-m)}return u},RenderJs.Canvas.Filters.Blur=function(e,t){return stackBlurImage(e,t)},RenderJs.Canvas.Filters.Grayscale=function(e){for(var t=Utils.getPixels(e),s=t.data,n=0;n<s.length;n+=4){var r=s[n],i=s[n+1],a=s[n+2],o=.2126*r+.7152*i+.0722*a;s[n]=s[n+1]=s[n+2]=o}return t},RenderJs.Canvas.Filters.Brightness=function(e,t){for(var s=Utils.getPixels(e),n=s.data,r=0;r<n.length;r+=4)n[r]+=t,n[r+1]+=t,n[r+2]+=t;return s},RenderJs.Canvas.Filters.Threshold=function(e,t){for(var s=Utils.getPixels(e),n=s.data,r=0;r<n.length;r+=4){var i=n[r],a=n[r+1],o=n[r+2],h=.2126*i+.7152*a+.0722*o>=t?255:0;n[r]=n[r+1]=n[r+2]=h}return s},registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Layer=inject("Utils","EventDispatcher","jQuery").class(function(e,t,s,n,r,i,a){var o=this,h=!1,c=new t,l=0;this.canvas=document.createElement("canvas"),document.getElementById(n).appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.canvas.width=r,this.canvas.height=i,this.active=a,this.prev=null,this.next=null,this.objects=[];var u=function(e,t){t=t||Utils.getMousePos(e.target,e),c.trigger(RenderJs.Canvas.Events.click,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.click,e),!0;this.prev&&s(this.prev.canvas).trigger("click",t)},d=function(e,t){t=t||Utils.getMousePos(e.target,e),c.trigger(RenderJs.Canvas.Events.mousemove,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mousemove,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mousemove",t)},v=function(e,t){t=t||Utils.getMousePos(e.target,e),c.trigger(RenderJs.Canvas.Events.mouseenter,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mouseenter,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mouseenter",t)},f=function(e,t){t=t||Utils.getMousePos(e.target,e),c.trigger(RenderJs.Canvas.Events.mouseleave,[e,t]);for(var n=this.objects.length-1;n>=0;n--)if(RenderJs.Physics.Collisions.pointInObject(t,this.objects[n]))return this.objects[n].trigger(RenderJs.Canvas.Events.mouseleave,[e,t]),!0;this.prev&&s(this.prev.canvas).trigger("mouseleave",t)},g=function(e){c.trigger(RenderJs.Canvas.Events.keydown,e)},p=function(e){c.trigger(RenderJs.Canvas.Events.keyup,e)},R=function(e){c.trigger(RenderJs.Canvas.Events.keypress,e)};s(this.canvas).on("click",function(e,t){u.call(o,e,t)}),s(this.canvas).on("mousemove",function(e,t){d.call(o,e,t)}),s(this.canvas).on("mouseenter",function(e,t){v.call(o,e,t)}),s(this.canvas).on("mouseleave",function(e,t){f.call(o,e,t)}),s(document).on("keydown",function(e){g.call(o,e)}),s(document).on("keyup",function(e){p.call(o,e)}),s(document).on("keypress",function(e){R.call(o,e)}),this.on=function(e,t){return RenderJs.Canvas.Events[e]?c.subscribe(e,t):void 0},this.addObject=function(e){if(!(e instanceof RenderJs.Canvas.Object))throw new Error("An object on the canvas should be inherited from CanvasObject!");e.layer=this,this.objects.push(e)},this.hasSprites=function(){for(var e=0,t=this.objects.length;t>e;e++)if(this.objects[e]instanceof RenderJs.Canvas.Shapes.Sprite)return!0;return!1},this.drawObjects=function(e,t){if((!h||c.hasSubscribers("animate")||this.hasSprites(this)||this.active)&&0!==this.objects.length){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);var s=Math.floor(1e3/e);c.trigger("animate",e);for(var n=!0,r=0,i=this.objects.length;i>r;r++)this.objects[r].loaded||(n=!1),this.objects[r].draw(this.ctx,{frameRate:e,lastTime:l,time:l+s},t);n&&(h=!0),l+=s}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Events={animate:"animate",click:"click",keydown:"keydown",keyup:"keyup",keypress:"keypress",mousemove:"mousemove",mousehover:"mousehover",mouseleave:"mouseleave",collision:"collision",objectChanged:"objectChanged"},RenderJs.Canvas.Object=inject("EventDispatcher","jQuery","Utils").class(function(e,t,s,n){this.dispatcher=new e,n=n||{},this.id=s.getGuid(),this.pos=new RenderJs.Vector(n.x,n.y),this.width=n.width||0,this.height=n.height||0,this.angle=n.angle||0,this.scaleX=n.scaleX,this.scaleY=n.scaleY,this.blurRadius=n.blurRadius,this.collision=n.collision||!1,this.filters=[],this.layer=null,this.loaded=!0,this.getCenter=function(){return new RenderJs.Vector(this.pos.x+this.width/2,this.pos.y+this.height/2)},this.getCenteredRect=function(){var e=this.pos;return{x:e.x,y:e.y,width:this.width,height:this.height}},this.setfilters=function(e){this.filters=e},this.updatePosition=function(e,t){var s=RenderJs.Vector.clone(this.pos.x,this.pos.y),n=this.pos.add(new RenderJs.Vector(e,t));this.pos=n,(s.x!==n.x||s.y!==n.y)&&this.trigger(RenderJs.Canvas.Events.objectChanged,this)},this.rotateShape=function(e){if(0!==this.angle){var t=this.getCenter();e.translate(t.x,t.y),e.rotate(s.convertToRad(this.angle)),e.translate(-t.x,-t.y)}},this.scaleShape=function(e,t,s){var n=this.getCenter();e.translate(n.x,n.y),e.scale(t,s),e.translate(-n.x,-n.y)},this.on=function(e,t){return RenderJs.Canvas.Events[e]?this.dispatcher.subscribe(e,t):void 0},this.trigger=function(e,t){RenderJs.Canvas.Events[e]&&this.dispatcher.trigger(e,t)}});var RenderJs=RenderJs||{};RenderJs.Canvas=RenderJs.Canvas||{},RenderJs.Canvas.Space=function(e){var t=function(e){this.stage=e.stage};t(e)},registerNamespace("RenderJs.Canvas"),RenderJs.Canvas.Stage=inject("Utils","EventDispatcher","LinkedList").class(function(e,t,s,n){var r=n.container||"viewport",i=0,a=new t;this.layers=new s,this.width=n.width||1200,this.height=n.height||800,this.position=new RenderJs.Vector(-50,-50),document.getElementById(r).style.width=this.width+"px",document.getElementById(r).style.height=this.height+"px";var o=function(){var t=this;i=e.getFps();for(var s=this.layers.getEnumerator();void 0!==s.next();)s.current().drawObjects(i,this.position);requestAnimationFrame(function(){o.call(t)})};o.call(this),this.onInvalidate=function(e){return a.subscribe("onInvalidate",e)},this.createLayer=function(e){var t=new RenderJs.Canvas.Layer(r,this.width,this.height,e);return this.layers.append(t),t}});var RenderJs=RenderJs||{};RenderJs.Canvas=RenderJs.Canvas||{},RenderJs.Canvas.Easings=RenderJs.Canvas.Easings||{},RenderJs.Canvas.Easings.BounceEaseOut=function(e,t,s,n){return(e/=n)<1/2.75?7.5625*s*e*e+t:2/2.75>e?s*(7.5625*(e-=1.5/2.75)*e+.75)+t:2.5/2.75>e?s*(7.5625*(e-=2.25/2.75)*e+.9375)+t:s*(7.5625*(e-=2.625/2.75)*e+.984375)+t},RenderJs.Canvas.Easings.BounceEaseIn=function(e,t,s,n){return s-Kinetic.Easings.BounceEaseOut(n-e,0,s,n)+t},RenderJs.Canvas.Easings.BounceEaseInOut=function(e,t,s,n){return n/2>e?.5*Kinetic.Easings.BounceEaseIn(2*e,0,s,n)+t:.5*Kinetic.Easings.BounceEaseOut(2*e-n,0,s,n)+.5*s+t},RenderJs.Canvas.Easings.EaseIn=function(e,t,s,n){return s*(e/=n)*e+t},RenderJs.Canvas.Easings.EaseOut=function(e,t,s,n){return-s*(e/=n)*(e-2)+t},RenderJs.Canvas.Easings.EaseInOut=function(e,t,s,n){return(e/=n/2)<1?s/2*e*e+t:-s/2*(--e*(e-2)-1)+t},RenderJs.Canvas.Easings.ElasticEaseIn=function(e,t,s,n,r,i){var a=0;return 0===e?t:1===(e/=n)?t+s:(i||(i=.3*n),!r||r<Math.abs(s)?(r=s,a=i/4):a=i/(2*Math.PI)*Math.asin(s/r),-(r*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/i))+t)},RenderJs.Canvas.Easings.ElasticEaseOut=function(e,t,s,n,r,i){var a=0;return 0===e?t:2===(e/=n/2)?t+s:(i||(i=.3*n*1.5),!r||r<Math.abs(s)?(r=s,a=i/4):a=i/(2*Math.PI)*Math.asin(s/r),1>e?-.5*r*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/i)+t:r*Math.pow(2,-10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/i)*.5+s+t)},RenderJs.Canvas.Easings.ElasticEaseInOut=function(e,t,s,n,r,i){var a=0;return 0===e?t:2===(e/=n/2)?t+s:(i||(i=.3*n*1.5),!r||r<Math.abs(s)?(r=s,a=i/4):a=i/(2*Math.PI)*Math.asin(s/r),1>e?-.5*r*Math.pow(2,10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/i)+t:r*Math.pow(2,-10*(e-=1))*Math.sin(2*(e*n-a)*Math.PI/i)*.5+s+t)},RenderJs.Canvas.Transition=function(e){var t=this,s=!1;this.duration=1e3*e.duration||1e3,this.shape=e.shape,this.props=e.props||{},this.origProps={};for(var n in e.props)this.origProps[n]=this.shape[n];this.easing=e.easing||RenderJs.Canvas.Easings.EaseInOut;var r=new RenderJs.Canvas.Animation(function(e){e.time>=t.duration&&r.stop();for(var n in t.props)t.shape[n]=s?t.easing(e.time,t.origProps[n]+t.props[n],-1*t.props[n],t.duration):t.easing(e.time,t.origProps[n],t.props[n],t.duration)},this.shape.layer);this.play=function(){r.start()},this.pause=function(){r.pause()},this.stop=function(){r.stop()},this.reverse=function(){s=!0,r.start()}};var RenderJs=RenderJs||{};RenderJs.Vector=function(e,t){this.x=e||0,this.y=t||0,this.set=function(e){return this.x=e.x,this.y=e.y,this},this.lengthSquared=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},this.length=function(){return Math.sqrt(this.lengthSquared())},this.length2=function(){return this.dot(this)},this.perp=function(){return new RenderJs.Vector(this.y,-this.x)},this.scale=function(e){return new RenderJs.Vector(this.x*e,this.y*e)},this.sub=function(e){return e instanceof RenderJs.Vector?new RenderJs.Vector(this.x-e.x,this.y-e.y):new RenderJs.Vector(this.x-e,this.y-e)},this.add=function(e){return e instanceof RenderJs.Vector?new RenderJs.Vector(this.x+e.x,this.y+e.y):new RenderJs.Vector(this.x+e,this.y+e)},this.dot=function(e){return this.x*e.x+this.y*e.y},this.dist=function(e){return this.sub(e).length()},this.normalize=function(){return this.scale(1/this.length())},this.angle=function(e){return this.dot(e)/(this.length()*e.length())},this.truncate=function(e){var t=Math.min(e,this.length());return t},this.rotate=function(e){var t=this.x,s=this.y;this.x=t*Math.cos(Utils.convertToRad(e))-s*Math.sin(Utils.convertToRad(e)),this.y=s*Math.cos(Utils.convertToRad(e))+t*Math.sin(Utils.convertToRad(e))},this.toString=function(e){return e?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"}},RenderJs.Vector.clone=function(e,t){return new RenderJs.Vector(e,t)},RenderJs.Vector.area=function(e,t,s){return(t.x-e.x)*(s.y-e.y)-(s.x-e.x)*(t.y-e.y)},RenderJs.Vector.left=function(e,t,s){return RenderJs.Vector.area(e,t,s)>0},RenderJs.Vector.leftOn=function(e,t,s){return RenderJs.Vector.area(e,t,s)>=0},RenderJs.Vector.right=function(e,t,s){return RenderJs.Vector.area(e,t,s)<0},RenderJs.Vector.rightOn=function(e,t,s){return RenderJs.Vector.area(e,t,s)<=0},RenderJs.Vector.sqdist=function(e,t){var s=t.x-e.x,n=t.y-e.y;return s*s+n*n},Scalar.eq=function(e,t,s){return s=s||0,Math.abs(e-t)<s};var RenderJs=RenderJs||{};RenderJs.Physics=RenderJs.Physics||{},RenderJs.Physics.Collisions=function(e){var t=function(e,t){"takes a point p=Pt() and an edge of two endpoints a,b=Pt() of a line segment returns boolean";var s,n=1e-5,r=Number.MAX_VALUE,i=Number.MIN_VALUE,a=0,o=t.p1,h=t.p2;o.y>h.y&&(o.set(h),h.set(o)),(e.y==o.y||e.y==h.y)&&(e.y+=n);var c=!1;return e.y>h.y||e.y<o.y||e.x>Math.max(o.x,h.x)?!1:(e.x<Math.min(o.x,h.x)?c=!0:(a=Math.abs(o.x-h.x)>i?(h.y-o.y)/(h.x-o.x):r,s=Math.abs(o.x-e.x)>i?(e.y-o.y)/(e.x-o.x):r,c=s>=a),c)},s=function(e,t){var s=e.length2(),n=t.dot(e);return 0>n?-1:n>s?1:0},n=function(e,s){for(var n=!1,r=0;r<s.rEdges.length;r++)t(e,s.rEdges[r])&&(n=!n);return n},r=function(e,t){var s=(t.pos2.y-t.pos.y)/(t.pos2.x-t.pos.x);return e.y-t.pos.y==s*(e.x-t.pos.y)},i=function(e,t){return o=t.getCenter(),Math.pow(e.x-o.x,2)+Math.pow(e.y-o.y,2)<=Math.pow(this.width/2,2)},a=function(e,t){var s=e.width,n=e.height,r=t.width,i=t.height;if(0>=r||0>=i||0>=s||0>=n)return!1;var a=e.x,o=e.y,h=t.x,c=t.y;return r+=h,i+=c,s+=a,n+=o,(h>r||r>a)&&(c>i||i>o)&&(a>s||s>h)&&(o>n||n>c)},h=function(e,t){return d(t.getCenter(),e)||c(e.topEdge(),t)||c(e.rightEdge(),t)||c(e.bottomEdge(),t)||c(e.leftEdge(),t)},c=function(e,t){var s=t.getCenter(),n=t.radius,r=new RenderJs.Vector(e.pos2.x-e.pos.x,e.pos2.y-e.pos.y),i=new RenderJs.Vector(e.pos.x-s.x,e.pos.y-s.y),a=r.dot(r),o=2*i.dot(r),t=i.dot(i)-n*n,h=o*o-4*a*t;if(0>h)return!1;h=Math.sqrt(h);var c=(-o-h)/(2*a),l=(-o+h)/(2*a);return c>=0&&1>=c?!0:l>=0&&1>=l?!0:!1},l=function(e,t){var s=t.v,n=e.radius+t.radius,r=(e.pos.x-t.pos.x)*(e.pos.x-t.pos.x)+(e.pos.y-t.pos.y)*(e.pos.y-t.pos.y);if(n*n>r){{var i=Math.sqrt(r),a=n-i,o=new RenderJs.Vector(e.pos.sub(t.pos).x/i,e.pos.sub(t.pos).y/i);t.pos.sub(e.pos)}return s.add(o.scale(a/2))}return null},u=function(e,t){for(var n=e.pos.sub(t.pos),r=e.radius,i=r*r,a=t.vertices.slice(),o=a.length,h=new RenderJs.Vector(0,0),c=new RenderJs.Vector(0,0),l={overlap:Number.MAX_VALUE,overlapN:new RenderJs.Vector(0,0),overlapV:new RenderJs.Vector(0,0)},u=0;o>u;u++){var d=u===o-1?0:u+1,v=0===u?o-1:u-1,f=0,g=null;h.set(t.vertices[u]),c.set(n),c.set(c.sub(a[u])),l&&c.length2()>i&&(l.aInB=!1);var p=s(h,c);if(-1===p){h.set(t.edges[v]);var R=new RenderJs.Vector(0,0).set(n).sub(a[v]);if(p=s(h,R),1===p){var y=c.length();if(y>r)return!1;l&&(l.bInA=!1,g=c.normalize(),f=r-y)}}else if(1===p){if(h.set(t.edges[d]),c.set(n),c.set(c.sub(a[d])),p=s(h,c),-1===p){var y=c.length();if(y>r)return!1;l&&(l.bInA=!1,g=c.normalize(),f=r-y)}}else{var J=h.perp().normalize(),y=c.dot(J),x=Math.abs(y);if(y>0&&x>r)return!1;l&&(g=J,f=r-y,(y>=0||2*r>f)&&(l.bInA=!1))}g&&l&&Math.abs(f)<Math.abs(l.overlap)&&(l.overlap=f,l.overlapN=new RenderJs.Vector(0,0).set(g))}return l&&(l.a=t,l.b=e,l.overlapV=new RenderJs.Vector(0,0).set(l.overlapN).scale(l.overlap)),!0},d=function(e,t){return e.x>=t.x&&e.x<=t.x+t.width&&e.y>=t.y&&e.y<=t.y+t.height};return e.AabbCollision=function(e,t){return Math.abs(e.x-t.x)<e.width+t.width&&Math.abs(e.y-t.y)<e.height+t.height?!0:!1},e.pointInObject=function(e,t){return t instanceof RenderJs.Canvas.Shapes.Rectangle?d(e,t):t instanceof RenderJs.Canvas.Shapes.Arc?i(e,t):t instanceof RenderJs.Canvas.Shapes.Polygon?n(e,t):t instanceof RenderJs.Canvas.Shapes.Line?r(e,t):!1},e.checkCollision=function(t,s,n){if(t instanceof RenderJs.Canvas.Shapes.Rectangle&&s instanceof RenderJs.Canvas.Shapes.Rectangle)return a(t,s);if(t instanceof RenderJs.Canvas.Shapes.Rectangle&&s instanceof RenderJs.Canvas.Shapes.Arc)return h(t,s);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Rectangle)return h(s,t);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Arc)return l(t,s,n);if(t instanceof RenderJs.Canvas.Shapes.Line&&s instanceof RenderJs.Canvas.Shapes.Arc)return c(t,s);if(t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Line)return c(s,t);if(t instanceof RenderJs.Canvas.Shapes.Polygon&&s instanceof RenderJs.Canvas.Shapes.Polygon){for(var r=0;r<t.subPolys.length;r++)for(var i=0;i<s.subPolys.length;i++){var o=e.polygonCollision(t.subPolys[r],s.subPolys[i],n);if(o.intersect||o.willIntersect)return o}return null}return t instanceof RenderJs.Canvas.Shapes.Arc&&s instanceof RenderJs.Canvas.Shapes.Polygon?u(t,s,n):t instanceof RenderJs.Canvas.Shapes.Polygon&&s instanceof RenderJs.Canvas.Shapes.Arc?u(s,t,n):!1},e}(RenderJs.Physics.Collisions||{});var RenderJs=RenderJs||{};RenderJs.Physics.Collisions=function(e){e.polygonCollision=function(e,n,r){for(var i,a={intersect:!0,willIntersect:!0},o=e.edges.length,h=n.edges.length,c=1/0,l=new RenderJs.Vector,u=0,v=o+h;v>u;u++){i=o>u?e.edges[u]:n.edges[u-o];var f=new RenderJs.Vector(-i.y,i.x);f.set(f.normalize());var g=0,p=0,R=0,y=0,J=s(f,e,g,R);g=J.min,R=J.max;var x=s(f,n,p,y);p=x.min,y=x.max,t(g,R,p,y)>0&&(a.intersect=!1);var C=f.dot(r);0>C?g+=C:R+=C;var m=t(g,R,p,y);if(m>0&&(a.willIntersect=!1),!a.intersect&&!a.willIntersect)break;m=Math.abs(m),c>m&&(c=m,l=f,d=e.getCenter().sub(n.getCenter()),d.dot(l)<0&&(l=l.scale(-1)))}return a.willIntersect&&(a.minimumTranslationVector=l.scale(c)),a};var t=function(e,t,s,n){return s>e?s-t:e-n},s=function(e,t,s,n){var r=e.dot(t.vertices[0]);s=r,n=r;for(var i=0;i<t.vertices.length;i++)r=t.vertices[i].dot(e),s>r?s=r:r>n&&(n=r);return{min:s,max:n}};return e}(RenderJs.Physics.Collisions||{}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Arc=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){"use strict";this.base(t),t=t||{},t.width=t.height=2*t.radius,2*t.radius,this.radius=t.radius,this.sAngle=e.convertToRad(t.sAngle||0),this.eAngle=e.convertToRad(t.eAngle||360),this.color=t.color,this.fillColor=t.fillColor,this.lineWidth=t.lineWidth||1,this.getCenter=function(){return new RenderJs.Vector(this.pos.x+this.width/2,this.pos.y+this.height/2)},this.pointIntersect=function(e){var t=this.getCenter();return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)<=Math.pow(this.width/2,2)},this.draw=function(e){0!==this.angle&&(e.save(),this.rotateShape(e)),e.beginPath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=this.fillColor,e.arc(this.pos.x+this.width/2,this.pos.y+this.height/2,this.width/2,this.sAngle,this.eAngle),this.color&&e.stroke(),this.fillColor&&e.fill(),e.closePath(),0!==this.angle&&e.restore()}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Image=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t);var s=document.createElement("img");s.src=t.url,s.onload=function(){o.width=s.width,o.height=s.height,n=!0};var n=!1,r=t.blurRadius||0,i=void 0==t.cache?!0:t.cache,a=null,o=this;this.draw=function(e){if(n){if(!a)for(var t=0;t<this.filters.length;t++)switch(this.filters[t]){case RenderJs.Canvas.Filters.Blur:a=RenderJs.Canvas.Filters.Blur(s,r)}a?e.putImageData(a,this.pos.x,this.pos.y):e.drawImage(s,this.pos.x,this.pos.y),i||(a=null)}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Line=inject().base(RenderJs.Canvas.Object).class(function(e){this.base({x:e.x1,y:e.y1,width:Math.abs(e.x2-e.x1),height:Math.abs(e.y2-e.y1)}),this.color="#000",this.lineWidth=1,this.pos2=new RenderJs.Vector(e.x2,e.y2),this.color=e.color,this.lineWidth=e.lineWidth||1,this.draw=function(e,t,s){var n=this.pos.sub(s),r=this.pos2.sub(s);e.beginPath(),e.moveTo(n.x,n.y),e.lineTo(r.x,r.y),e.closePath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.stroke()}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Polygon=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t),this.color=t.color||"#000",this.lineWidth=t.lineWidth||1,this.vertices=t.points||[],this.subPolys=[],this.edges=[],this.rEdges=[],this.buildEdges(),this.decompose=function(e,t,s,n,r,i){r=r||100,i=i||0,n=n||25,e="undefined"!=typeof e?e:[],t=t||[],s=s||[];var a=new RenderJs.Vector(0,0),o=new RenderJs.Vector(0,0),h=new RenderJs.Vector(0,0),c=0,l=0,u=0,d=0,v=0,f=0,g=0,p=new RenderJs.Canvas.Shapes.Polygon,R=new RenderJs.Canvas.Shapes.Polygon,y=this,J=this.vertices;if(J.length<3)return e;if(i++,i>r)return console.warn("quickDecomp: max level ("+r+") reached."),e;for(var x=0;x<this.vertices.length;++x)if(y.isReflex(x)){t.push(y.vertices[x]),c=l=Number.MAX_VALUE;for(var C=0;C<this.vertices.length;++C)RenderJs.Vector.left(y.at(x-1),y.at(x),y.at(C))&&RenderJs.Vector.rightOn(y.at(x-1),y.at(x),y.at(C-1))&&(h=this.getIntersectionPoint(y.at(x-1),y.at(x),y.at(C),y.at(C-1)),RenderJs.Vector.right(y.at(x+1),y.at(x),h)&&(u=RenderJs.Vector.sqdist(y.vertices[x],h),l>u&&(l=u,o=h,f=C))),RenderJs.Vector.left(y.at(x+1),y.at(x),y.at(C+1))&&RenderJs.Vector.rightOn(y.at(x+1),y.at(x),y.at(C))&&(h=this.getIntersectionPoint(y.at(x+1),y.at(x),y.at(C),y.at(C+1)),RenderJs.Vector.left(y.at(x-1),y.at(x),h)&&(u=RenderJs.Vector.sqdist(y.vertices[x],h),c>u&&(c=u,a=h,v=C)));if(f==(v+1)%this.vertices.length)h.x=(o.x+a.x)/2,h.y=(o.y+a.y)/2,s.push(h),v>x?(p.append(y,x,v+1),p.vertices.push(h),R.vertices.push(h),0!=f&&R.append(y,f,y.vertices.length),R.append(y,0,x+1)):(0!=x&&p.append(y,x,y.vertices.length),p.append(y,0,v+1),p.vertices.push(h),R.vertices.push(h),R.append(y,f,x+1));else{if(f>v&&(v+=this.vertices.length),d=Number.MAX_VALUE,f>v)return e;for(var C=f;v>=C;++C)RenderJs.Vector.leftOn(y.at(x-1),y.at(x),y.at(C))&&RenderJs.Vector.rightOn(y.at(x+1),y.at(x),y.at(C))&&(u=RenderJs.Vector.sqdist(y.at(x),y.at(C)),d>u&&(d=u,g=C%this.vertices.length));g>x?(p.append(y,x,g+1),0!==g&&R.append(y,g,J.length),R.append(y,0,x+1)):(0!==x&&p.append(y,x,J.length),p.append(y,0,g+1),R.append(y,g,x+1))}p.vertices.length<R.vertices.length?(p.decompose(e,t,s,n,r,i),R.decompose(e,t,s,n,r,i)):(R.decompose(e,t,s,n,r,i),p.decompose(e,t,s,n,r,i));for(var m=0;m<e.length;m++)e[m].buildEdges();return e}return e.push(this),e},this.append=function(e,t,s){if("undefined"==typeof t)throw new Error("From is not given!");if("undefined"==typeof s)throw new Error("To is not given!");if(t>s-1)throw new Error("lol1");if(s>e.vertices.length)throw new Error("lol2");if(0>t)throw new Error("lol3");for(var n=t;s>n;n++)this.vertices.push(e.vertices[n])},this.at=function(e){var t=this.vertices,s=t.length;return t[0>e?e%s+s:e%s]},this.first=function(){return this.vertices[0]},this.last=function(){return this.vertices[this.vertices.length-1]},this.isSimple=function(){for(var e=this.vertices,t=0;t<e.length-1;t++)for(var s=0;t-1>s;s++)if(this.segmentsIntersect(e[t],e[t+1],e[s],e[s+1]))return!1;for(var t=1;t<e.length-2;t++)if(this.segmentsIntersect(e[0],e[e.length-1],e[t],e[t+1]))return!1;return!0},this.getIntersectionPoint=function(e,t,s,n,r){r=r||0;var i=t.y-e.y,a=e.x-t.x,o=i*e.x+a*e.y,h=n.y-s.y,c=s.x-n.x,l=h*s.x+c*s.y,u=i*c-h*a;return Scalar.eq(u,0,r)?RenderJs.Vector.clone(0,0):RenderJs.Vector.clone((c*o-a*l)/u,(i*l-h*o)/u)},this.isReflex=function(e){return RenderJs.Vector.right(this.at(e-1),this.at(e),this.at(e+1))},this.makeCCW=function(){for(var e=0,t=this.vertices,s=1;s<this.vertices.length;++s)(t[s].y<t[e].y||t[s].y==t[e].y&&t[s].x>t[e].x)&&(e=s);RenderJs.Vector.left(this.at(e-1),this.at(e),this.at(e+1))||this.reverse()},this.reverse=function(){for(var e=[],t=0,s=this.vertices.length;t!==s;t++)e.push(this.vertices.pop());this.vertices=e},this.segmentsIntersect=function(e,t,s,n){var r=t.x-e.x,i=t.y-e.y,a=n.x-s.x,o=n.y-s.y;if(a*i-o*r==0)return!1;var h=(r*(s.y-e.y)+i*(e.x-s.x))/(a*i-o*r),c=(a*(e.y-s.y)+o*(s.x-e.x))/(o*r-a*i);return h>=0&&1>=h&&c>=0&&1>=c},this.buildEdges=function(){var e,t;this.edges=[],this.rEdges=[];for(var s=0;s<this.vertices.length;s++)e=this.vertices[s],t=s+1>=this.vertices.length?this.vertices[0]:this.vertices[s+1],this.edges.push(t.sub(e)),this.rEdges.push({p1:new RenderJs.Vector(e.x,e.y),p2:new RenderJs.Vector(t.x,t.y)})},this.getCenter=function(){for(var e=0,t=0,s=0;s<this.vertices.length;s++)e+=this.vertices[s].x,t+=this.vertices[s].y;return new RenderJs.Vector(e/this.vertices.length,t/this.vertices.length)},this.offset=function(){var e=2===arguments.length?new RenderJs.Vector(arguments[0],arguments[1]):arguments[0];this.pos.set(this.pos.add(e));for(var t=0;t<this.vertices.length;t++){var s=this.vertices[t];this.vertices[t].set(s.add(e))}this.subPolys=this.decompose()},this.toString=function(){for(var e="",t=0;t<this.vertices.length;t++)""!=e&&(e+=" "),e+="{"+this.vertices[t].toString(!0)+"}";return e},this.draw=function(e){for(var t=["indianred","yellow","green"],s=0;s<this.subPolys.length;s++){var n=this.subPolys[s].vertices;e.beginPath(),e.moveTo(n[0].x,n[0].y);for(var r=1;r<n.length;r++)e.lineTo(n[r].x,n[r].y);e.closePath(),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=t[s],e.fill(),e.stroke()}}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Rectangle=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t),this.color=t.color,this.fillColor=t.fillColor,this.lineWidth=t.lineWidth||1,this.draw=function(e){this.color&&e.strokeRect(this.pos.x,this.pos.y,this.width,this.height),this.fillColor&&e.fillRect(this.pos.x,this.pos.y,this.width,this.height),e.lineWidth=this.lineWidth,e.strokeStyle=this.color,e.fillStyle=this.fillColor}}),registerNamespace("RenderJs.Canvas.Shapes"),RenderJs.Canvas.Shapes.Sprite=inject("Utils").base(RenderJs.Canvas.Object).class(function(e,t){this.base(t);var s=this,n=document.createElement("img");n.onload=function(){s.width=n.width,s.height=n.height,a=!0},n.src=t.url;var r,i,a=!1,o=0,h=t.frameCount,c=!1,l=!1,u=t.defAnimation,d=t.animations,v=function(e,t){o=0,c=!0,l=t,d[e]&&(i=r,r=d[e])};this.start=function(){v(u,!0)},this.setAnimation=function(e,t){v(e,t)},this.pointIntersect=function(){return!1},this.getRect=function(){var e=d[u][0];return{x:this.pos.x,y:this.pos.y,width:e[2],height:e[3]}},this.rotateShape=function(t,s){if(0!==this.angle){var n=d[u][0],r=new RenderJs.Vector(s.x+n[2]/2,s.y+n[3]/2);t.translate(r.x,r.y),t.rotate(e.convertToRad(this.angle)),t.translate(-r.x,-r.y)}},this.draw=function(e,t,s){if(a&&c){var i=this.pos.sub(s);0!==this.angle&&(e.save(),this.rotateShape(e,i));var d=r[o];e.drawImage(n,d[0],d[1],d[2],d[3],i.x,i.y,d[2],d[3]),Math.floor(t.time)%h===0&&(o=o>=r.length-1?0:o+1,0!==o||l||v(u,!0)),0!==this.angle&&e.restore()}}});
//# sourceMappingURL=data:application/json;base64,